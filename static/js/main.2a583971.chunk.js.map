{"version":3,"sources":["Person/Person.js","ErrorBoundary/ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["person","props","Math","random","Error","className","onClick","click","name","age","children","type","onChange","changed","value","ErrorBoundary","state","hasError","errorMessage","componentDidCatch","error","info","setState","this","Component","App","persons","id","otherState","showPersons","nameChangedHandler","event","personIndex","findIndex","p","target","deletePersonHandler","splice","togglerPersonHandler","doesShow","map","index","key","style","backgroundColor","font","border","padding","cursor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"yTAoBeA,G,YAhBA,SAACC,GAGZ,GAFYC,KAAKC,SAEP,GACN,MAAM,IAAIC,MAAM,wBAEpB,OAEI,yBAAKC,UAAU,UACX,uBAAGC,QAASL,EAAMM,OAAlB,QAA+BN,EAAMO,KAArC,aAAqDP,EAAMQ,IAA3D,WACA,2BAAIR,EAAMS,UACV,2BAAOC,KAAK,OAAOC,SAAUX,EAAMY,QAASC,MAAOb,EAAMO,UCMtDO,E,4MAjBXC,MAAQ,CACJC,UAAU,EACVC,aAAc,I,EAGlBC,kBAAoB,SAACC,EAAOC,GACxB,EAAKC,SAAS,CAACL,UAAU,EAAMC,aAAcE,K,uDAG7C,OAAGG,KAAKP,MAAMC,SACL,4BAAKM,KAAKP,MAAME,cAEdK,KAAKtB,MAAMS,a,GAdFc,aCyFbC,E,4MApFbT,MAAQ,CACNU,QAAS,CACP,CAAEC,GAAI,QAASnB,KAAM,MAAOC,IAAK,IACjC,CAAEkB,GAAI,QAASnB,KAAM,OAAQC,IAAK,IAClC,CAAEkB,GAAI,QAASnB,KAAM,UAAWC,IAAK,KAEvCmB,WAAY,mBACZC,aAAa,G,EAGfC,mBAAqB,SAACC,EAAOJ,GAC3B,IAAMK,EAAc,EAAKhB,MAAMU,QAAQO,WAAW,SAAAC,GAChD,OAAOA,EAAEP,KAAOA,KAGZ3B,EAAM,eACP,EAAKgB,MAAMU,QAAQM,IAKxBhC,EAAOQ,KAAOuB,EAAMI,OAAOrB,MAE3B,IAAMY,EAAO,YAAO,EAAKV,MAAMU,SAC/BA,EAAQM,GAAehC,EAEvB,EAAKsB,SAAW,CAACI,QAASA,K,EAG5BU,oBAAsB,SAACJ,GAErB,IAAMN,EAAO,YAAO,EAAKV,MAAMU,SAC/BA,EAAQW,OAAOL,EAAa,GAC5B,EAAKV,SAAS,CAACI,QAASA,K,EAG1BY,qBAAuB,WACrB,IAAMC,EAAW,EAAKvB,MAAMa,YAC5B,EAAKP,SAAS,CAACO,aAAeU,K,uDAGtB,IAAD,OAUHb,EAAU,KAmBd,OAjBIH,KAAKP,MAAMa,cACbH,EACE,6BACKH,KAAKP,MAAMU,QAAQc,KAAI,SAACxC,EAAQyC,GAC/B,OAAO,kBAAC,EAAD,CAAeC,IAAK1C,EAAO2B,IAChC,kBAAC,EAAD,CACEpB,MAAO,kBAAM,EAAK6B,oBAAoBK,IACtCjC,KAAMR,EAAOQ,KACbC,IAAKT,EAAOS,IAEZI,QAAS,SAACkB,GAAD,OAAW,EAAKD,mBAAmBC,EAAO/B,EAAO2B,aAQtE,yBAAKtB,UAAU,OACb,kDACA,0EACA,4BACEsC,MAhCQ,CACZC,gBAAiB,QACjBC,KAAM,UACNC,OAAQ,iBACRC,QAAS,MACTC,OAAQ,WA4BJ1C,QAASiB,KAAKe,sBAFhB,kBAGCZ,O,GA/ESF,aCOEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACL8C,QAAQ9C,MAAMA,EAAM+C,c","file":"static/js/main.2a583971.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Person.css'\r\n\r\nconst person = (props) => {\r\n    const rnd = Math.random();\r\n\r\n    if (rnd > 0.7) {\r\n        throw new Error('Something went wrong');\r\n    }\r\n    return (\r\n\r\n        <div className=\"Person\">\r\n            <p onClick={props.click}>I am {props.name} and I am {props.age} years </p>\r\n            <p>{props.children}</p>\r\n            <input type=\"text\" onChange={props.changed} value={props.name} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default person;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n    state = {\r\n        hasError: false,\r\n        errorMessage: ''\r\n    }\r\n\r\n    componentDidCatch = (error, info) => {\r\n        this.setState({hasError: true, errorMessage: error});\r\n    }\r\n    render(){\r\n        if(this.state.hasError) {\r\n          return <h1>{this.state.errorMessage}</h1>    \r\n        } else {\r\n            return this.props.children;\r\n        }        \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\nimport ErrorBoundary from './ErrorBoundary/ErrorBoundary'\n\nclass App extends Component {\n\n  state = {\n    persons: [\n      { id: 'asfa1', name: 'Max', age: 23 },\n      { id: 'vasa1', name: 'Manu', age: 20 },\n      { id: 'asdd1', name: 'Minerva', age: 26 }\n    ],\n    otherState: 'some other value',\n    showPersons: false\n  }\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex( p => {\n      return p.id === id;\n    });\n\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n\n    //const person = Object.assign ({}, this.state.persons[personIndex]);\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n\n    this.setState ( {persons: persons} );  \n  }\n  \n  deletePersonHandler = (personIndex) =>{\n    //const persons = this.state.persons.slice();\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({persons: persons})\n  }\n\n  togglerPersonHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({showPersons : !doesShow})\n  }\n\n  render() {\n\n    const style = {\n      backgroundColor: 'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer'\n    };\n\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = (\n        <div>\n            {this.state.persons.map((person, index) => {\n              return <ErrorBoundary key={person.id}>\n                <Person\n                  click={() => this.deletePersonHandler(index)}\n                  name={person.name}\n                  age={person.age}\n                  \n                  changed={(event) => this.nameChangedHandler(event, person.id)}/></ErrorBoundary>\n            })}\n            \n          </div>\n\n      )\n    }\n    return (\n      <div className=\"App\">\n        <h1>List of Components</h1>\n        <p>Click on a paragraph to remove a component!</p>\n        <button\n          style={style}\n          onClick={this.togglerPersonHandler}>Toggle Persons</button>   \n        {persons}    \n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}